//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.3
//     from Assets/2022_12_05_OpenXRInputExtractor/ClassicOpenXR.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace OpenXRActionInput
{
    public partial class @ClassicOpenXR : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @ClassicOpenXR()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""ClassicOpenXR"",
    ""maps"": [
        {
            ""name"": ""LeftInput"",
            ""id"": ""a3a24055-3fdb-48bc-bf2f-6443155eb3ca"",
            ""actions"": [
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""2ea18977-4ab8-4d30-955b-0c95473376ce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DownButton"",
                    ""type"": ""Button"",
                    ""id"": ""ea1037f9-859c-4a92-85c4-df86e54fd9c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DownButtonOver"",
                    ""type"": ""Button"",
                    ""id"": ""0ad5132f-fd1d-46aa-9cf8-697f09aec817"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TopButton"",
                    ""type"": ""Button"",
                    ""id"": ""6f7a57f4-385b-4295-bf90-01ae9ba3fcec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TopButtonOver"",
                    ""type"": ""Button"",
                    ""id"": ""50e21712-54f3-42be-b992-de2b9b1d0bc7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""JoystickButtonOver"",
                    ""type"": ""Button"",
                    ""id"": ""7efbaade-a0d9-4323-b40b-e2cc9cf92e75"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""JoystickButtonPressed"",
                    ""type"": ""Button"",
                    ""id"": ""fc3c2605-689e-4db7-a90b-205df79842a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GripPercent"",
                    ""type"": ""Value"",
                    ""id"": ""509a0b6a-b0b7-4450-82c5-0ee3fc01fd22"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TriggerPercent"",
                    ""type"": ""Value"",
                    ""id"": ""56d76b4c-61b2-40b8-9288-706fdb3f37ee"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TriggerOver"",
                    ""type"": ""Button"",
                    ""id"": ""2f70503c-09c2-41bd-a267-a19f4b258ea6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Joystick2D"",
                    ""type"": ""Value"",
                    ""id"": ""ab14df24-95d6-462a-9447-82e041ddd760"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""IsTracked"",
                    ""type"": ""Button"",
                    ""id"": ""bb357043-a71a-4c61-aa91-49e829489cb2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""472e66c9-3e53-4c12-a27b-91f2528e6759"",
                    ""path"": ""<XRController>{LeftHand}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f129d42f-9c6a-4d43-8b9f-3106cb7d0ab5"",
                    ""path"": ""<XRController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""46b72776-95c2-44a2-aed3-c5e3c925d758"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TopButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e4eccf9-987b-4f71-9fd5-321f4c21352c"",
                    ""path"": ""<XRController>{LeftHand}/thumbstickTouched"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JoystickButtonOver"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""514518f6-8538-4206-9b44-67b821601201"",
                    ""path"": ""<XRController>{LeftHand}/thumbstickClicked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JoystickButtonPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bad3b6b0-d477-48bf-afa2-81824b9a5afd"",
                    ""path"": ""<XRController>{LeftHand}/secondaryTouched"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TopButtonOver"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff8cf2c2-d949-4f52-8848-d7dee4067f80"",
                    ""path"": ""<XRController>{LeftHand}/primaryTouched"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownButtonOver"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74eb1cc5-7747-45e5-b6f1-aa8aa38b664d"",
                    ""path"": ""<XRController>{LeftHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GripPercent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""307ad820-6988-4e45-80f3-561d57fe7496"",
                    ""path"": ""<XRController>{LeftHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerPercent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5fdc7e93-7acb-4c8d-9909-3c0f45f491bf"",
                    ""path"": ""<XRController>{LeftHand}/triggerTouched"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerOver"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""273b1f67-1772-4021-9b5f-39b843d4dd85"",
                    ""path"": ""<XRController>{LeftHand}/joystick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joystick2D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e975ba7-54ab-4e18-ab62-5ba0d8a4fec3"",
                    ""path"": ""<XRController>{LeftHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joystick2D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f9448a82-f9b7-40eb-abaa-c2e53a6ad2ed"",
                    ""path"": ""<XRController>{LeftHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ListenToOpenXR"",
                    ""action"": ""IsTracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RightInput"",
            ""id"": ""1d4a49d7-9dd8-4091-b7fb-2fe101d6aff2"",
            ""actions"": [
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""20a37fd5-da0b-45d6-b30d-f647c5d66898"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DownButton"",
                    ""type"": ""Button"",
                    ""id"": ""b9fa2e9b-f3e0-432e-8c76-1da830b080a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DownButtonOver"",
                    ""type"": ""Button"",
                    ""id"": ""d3e4cb6a-b265-44b0-a775-565934b46cc4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TopButton"",
                    ""type"": ""Button"",
                    ""id"": ""fb8e2ca0-659c-4d5d-b3e4-99013e2dff07"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TopButtonOver"",
                    ""type"": ""Button"",
                    ""id"": ""24bbbb60-57c5-49a5-9bd9-15d6d9c0f953"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""JoystickButtonOver"",
                    ""type"": ""Button"",
                    ""id"": ""667b547f-eb35-466a-82d8-11b10c4ca463"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""JoystickButtonPressed"",
                    ""type"": ""Button"",
                    ""id"": ""5e37a41b-c8fd-41e8-87c5-060bf21488f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GripPercent"",
                    ""type"": ""Value"",
                    ""id"": ""cf5b7b56-1d3d-4e75-aa02-70a6e4bd3585"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TriggerPercent"",
                    ""type"": ""Value"",
                    ""id"": ""567f11ca-cef0-4daf-89fc-721c700c8909"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TriggerOver"",
                    ""type"": ""Button"",
                    ""id"": ""f3f3cacf-b5ae-45ea-874c-285760e7f63c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Joystick2D"",
                    ""type"": ""Value"",
                    ""id"": ""c00a8f75-82b1-4630-8660-c9e2f94e7b0c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""IsTracked"",
                    ""type"": ""Button"",
                    ""id"": ""45b79f67-567d-4340-9e41-72d0bd66a0dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""107e7de2-15dd-4bb6-87d7-55defe0ab169"",
                    ""path"": ""<XRController>{RightHand}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7019a337-2388-43c2-8ef3-173b2dcdcc06"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3626820-ed3c-4fed-9dda-e16e9ccbac58"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TopButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a261871-37dc-4cde-8df3-a6162c80921a"",
                    ""path"": ""<XRController>{RightHand}/thumbstickTouched"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JoystickButtonOver"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d21b4d9-e5c6-4998-b1ad-c7963d145ca8"",
                    ""path"": ""<XRController>{RightHand}/thumbstickClicked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JoystickButtonPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""712fc2cf-6570-4665-9e92-8e3d9a4ea2bc"",
                    ""path"": ""<XRController>{RightHand}/secondaryTouched"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TopButtonOver"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35a8286f-878e-4ed5-89c0-44af958b0872"",
                    ""path"": ""<XRController>{RightHand}/primaryTouched"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownButtonOver"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""662ac52e-7f32-431e-a346-c8a11e3e0f4e"",
                    ""path"": ""<XRController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerPercent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9db9600d-f591-497b-8c58-4e973de79063"",
                    ""path"": ""<XRController>{RightHand}/triggerTouched"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerOver"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28092489-cd50-4451-8a29-6fef0a626a58"",
                    ""path"": ""<XRController>{RightHand}/joystick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joystick2D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d53124c-a794-4bf5-a7f0-5b03401301ca"",
                    ""path"": ""<XRController>{RightHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joystick2D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7cc3759a-8952-4947-99f6-08a0e199cdff"",
                    ""path"": ""<XRController>{RightHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GripPercent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ee8fac4-b550-4d02-8f77-7f9fa40f36a7"",
                    ""path"": ""<XRController>{RightHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ListenToOpenXR"",
                    ""action"": ""IsTracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OculusSpecific"",
            ""id"": ""6443b6bb-9f65-4472-97c1-b1e78ec1c27a"",
            ""actions"": [
                {
                    ""name"": ""LeftTouchPad"",
                    ""type"": ""Value"",
                    ""id"": ""5cae86c0-f507-49ca-a7ad-379ecf0d9a55"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightTouchPad"",
                    ""type"": ""Value"",
                    ""id"": ""4aabf3cb-a3cd-4d10-a568-35bd99789db8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9e1ae106-bc33-4e17-b5cc-e36e5aa3fb71"",
                    ""path"": ""<XRController>{LeftHand}/touchpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTouchPad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""875b0bcf-f8f2-4624-bf11-baec0e48a47a"",
                    ""path"": ""<XRController>{LeftHand}/trackpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTouchPad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11634ca9-716c-492e-9313-967cf86bb047"",
                    ""path"": ""<XRController>{RightHand}/touchpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTouchPad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bba7b33f-c7a7-440b-a32c-a0ffc1d6df31"",
                    ""path"": ""<XRController>{RightHand}/trackpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTouchPad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LeftController"",
            ""id"": ""45dc3867-4fb3-43a3-b2f9-387d5df4ca01"",
            ""actions"": [
                {
                    ""name"": ""IsTracked"",
                    ""type"": ""Button"",
                    ""id"": ""fc02a77a-e213-4c20-bfd2-0e6571ad6b98"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""766a2ec0-c838-455d-abdd-8a2e3d50363d"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""3639e759-c3dc-4447-b171-f5b5e0400c62"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4d7188de-0c8a-46a2-ac41-5beaf63ac7b5"",
                    ""path"": ""<XRController>{LeftHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ListenToOpenXR"",
                    ""action"": ""IsTracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""726d6862-573d-4e09-b6af-2a48fc367202"",
                    ""path"": ""<XRController>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40dd9b6f-d661-47dd-84cd-e53dd39e8871"",
                    ""path"": ""<XRController>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RightController"",
            ""id"": ""12dda047-4001-4f0b-a560-2f72657383e8"",
            ""actions"": [
                {
                    ""name"": ""IsTracked"",
                    ""type"": ""Button"",
                    ""id"": ""bf032e70-21c9-42b0-95d4-7550b5cc2938"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""accc2890-86dc-41d7-b758-9c95ab25ce37"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""c1716619-edb5-4b83-8b01-e55e5bde8b9b"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e43c7f4a-e6fa-45c4-8839-6b6d6b40d5ac"",
                    ""path"": ""<XRController>{RightHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""ListenToOpenXR"",
                    ""action"": ""IsTracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51f19188-acd7-45e9-beb6-3c53c2213f1a"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a5053f0-a94c-45d1-ac58-df6dce06e584"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""ListenToOpenXR"",
            ""bindingGroup"": ""ListenToOpenXR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>{LeftHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>{RightHand}"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // LeftInput
            m_LeftInput = asset.FindActionMap("LeftInput", throwIfNotFound: true);
            m_LeftInput_Menu = m_LeftInput.FindAction("Menu", throwIfNotFound: true);
            m_LeftInput_DownButton = m_LeftInput.FindAction("DownButton", throwIfNotFound: true);
            m_LeftInput_DownButtonOver = m_LeftInput.FindAction("DownButtonOver", throwIfNotFound: true);
            m_LeftInput_TopButton = m_LeftInput.FindAction("TopButton", throwIfNotFound: true);
            m_LeftInput_TopButtonOver = m_LeftInput.FindAction("TopButtonOver", throwIfNotFound: true);
            m_LeftInput_JoystickButtonOver = m_LeftInput.FindAction("JoystickButtonOver", throwIfNotFound: true);
            m_LeftInput_JoystickButtonPressed = m_LeftInput.FindAction("JoystickButtonPressed", throwIfNotFound: true);
            m_LeftInput_GripPercent = m_LeftInput.FindAction("GripPercent", throwIfNotFound: true);
            m_LeftInput_TriggerPercent = m_LeftInput.FindAction("TriggerPercent", throwIfNotFound: true);
            m_LeftInput_TriggerOver = m_LeftInput.FindAction("TriggerOver", throwIfNotFound: true);
            m_LeftInput_Joystick2D = m_LeftInput.FindAction("Joystick2D", throwIfNotFound: true);
            m_LeftInput_IsTracked = m_LeftInput.FindAction("IsTracked", throwIfNotFound: true);
            // RightInput
            m_RightInput = asset.FindActionMap("RightInput", throwIfNotFound: true);
            m_RightInput_Menu = m_RightInput.FindAction("Menu", throwIfNotFound: true);
            m_RightInput_DownButton = m_RightInput.FindAction("DownButton", throwIfNotFound: true);
            m_RightInput_DownButtonOver = m_RightInput.FindAction("DownButtonOver", throwIfNotFound: true);
            m_RightInput_TopButton = m_RightInput.FindAction("TopButton", throwIfNotFound: true);
            m_RightInput_TopButtonOver = m_RightInput.FindAction("TopButtonOver", throwIfNotFound: true);
            m_RightInput_JoystickButtonOver = m_RightInput.FindAction("JoystickButtonOver", throwIfNotFound: true);
            m_RightInput_JoystickButtonPressed = m_RightInput.FindAction("JoystickButtonPressed", throwIfNotFound: true);
            m_RightInput_GripPercent = m_RightInput.FindAction("GripPercent", throwIfNotFound: true);
            m_RightInput_TriggerPercent = m_RightInput.FindAction("TriggerPercent", throwIfNotFound: true);
            m_RightInput_TriggerOver = m_RightInput.FindAction("TriggerOver", throwIfNotFound: true);
            m_RightInput_Joystick2D = m_RightInput.FindAction("Joystick2D", throwIfNotFound: true);
            m_RightInput_IsTracked = m_RightInput.FindAction("IsTracked", throwIfNotFound: true);
            // OculusSpecific
            m_OculusSpecific = asset.FindActionMap("OculusSpecific", throwIfNotFound: true);
            m_OculusSpecific_LeftTouchPad = m_OculusSpecific.FindAction("LeftTouchPad", throwIfNotFound: true);
            m_OculusSpecific_RightTouchPad = m_OculusSpecific.FindAction("RightTouchPad", throwIfNotFound: true);
            // LeftController
            m_LeftController = asset.FindActionMap("LeftController", throwIfNotFound: true);
            m_LeftController_IsTracked = m_LeftController.FindAction("IsTracked", throwIfNotFound: true);
            m_LeftController_Position = m_LeftController.FindAction("Position", throwIfNotFound: true);
            m_LeftController_Rotation = m_LeftController.FindAction("Rotation", throwIfNotFound: true);
            // RightController
            m_RightController = asset.FindActionMap("RightController", throwIfNotFound: true);
            m_RightController_IsTracked = m_RightController.FindAction("IsTracked", throwIfNotFound: true);
            m_RightController_Position = m_RightController.FindAction("Position", throwIfNotFound: true);
            m_RightController_Rotation = m_RightController.FindAction("Rotation", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // LeftInput
        private readonly InputActionMap m_LeftInput;
        private ILeftInputActions m_LeftInputActionsCallbackInterface;
        private readonly InputAction m_LeftInput_Menu;
        private readonly InputAction m_LeftInput_DownButton;
        private readonly InputAction m_LeftInput_DownButtonOver;
        private readonly InputAction m_LeftInput_TopButton;
        private readonly InputAction m_LeftInput_TopButtonOver;
        private readonly InputAction m_LeftInput_JoystickButtonOver;
        private readonly InputAction m_LeftInput_JoystickButtonPressed;
        private readonly InputAction m_LeftInput_GripPercent;
        private readonly InputAction m_LeftInput_TriggerPercent;
        private readonly InputAction m_LeftInput_TriggerOver;
        private readonly InputAction m_LeftInput_Joystick2D;
        private readonly InputAction m_LeftInput_IsTracked;
        public struct LeftInputActions
        {
            private @ClassicOpenXR m_Wrapper;
            public LeftInputActions(@ClassicOpenXR wrapper) { m_Wrapper = wrapper; }
            public InputAction @Menu => m_Wrapper.m_LeftInput_Menu;
            public InputAction @DownButton => m_Wrapper.m_LeftInput_DownButton;
            public InputAction @DownButtonOver => m_Wrapper.m_LeftInput_DownButtonOver;
            public InputAction @TopButton => m_Wrapper.m_LeftInput_TopButton;
            public InputAction @TopButtonOver => m_Wrapper.m_LeftInput_TopButtonOver;
            public InputAction @JoystickButtonOver => m_Wrapper.m_LeftInput_JoystickButtonOver;
            public InputAction @JoystickButtonPressed => m_Wrapper.m_LeftInput_JoystickButtonPressed;
            public InputAction @GripPercent => m_Wrapper.m_LeftInput_GripPercent;
            public InputAction @TriggerPercent => m_Wrapper.m_LeftInput_TriggerPercent;
            public InputAction @TriggerOver => m_Wrapper.m_LeftInput_TriggerOver;
            public InputAction @Joystick2D => m_Wrapper.m_LeftInput_Joystick2D;
            public InputAction @IsTracked => m_Wrapper.m_LeftInput_IsTracked;
            public InputActionMap Get() { return m_Wrapper.m_LeftInput; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(LeftInputActions set) { return set.Get(); }
            public void SetCallbacks(ILeftInputActions instance)
            {
                if (m_Wrapper.m_LeftInputActionsCallbackInterface != null)
                {
                    @Menu.started -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnMenu;
                    @Menu.performed -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnMenu;
                    @Menu.canceled -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnMenu;
                    @DownButton.started -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnDownButton;
                    @DownButton.performed -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnDownButton;
                    @DownButton.canceled -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnDownButton;
                    @DownButtonOver.started -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnDownButtonOver;
                    @DownButtonOver.performed -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnDownButtonOver;
                    @DownButtonOver.canceled -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnDownButtonOver;
                    @TopButton.started -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnTopButton;
                    @TopButton.performed -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnTopButton;
                    @TopButton.canceled -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnTopButton;
                    @TopButtonOver.started -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnTopButtonOver;
                    @TopButtonOver.performed -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnTopButtonOver;
                    @TopButtonOver.canceled -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnTopButtonOver;
                    @JoystickButtonOver.started -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnJoystickButtonOver;
                    @JoystickButtonOver.performed -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnJoystickButtonOver;
                    @JoystickButtonOver.canceled -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnJoystickButtonOver;
                    @JoystickButtonPressed.started -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnJoystickButtonPressed;
                    @JoystickButtonPressed.performed -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnJoystickButtonPressed;
                    @JoystickButtonPressed.canceled -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnJoystickButtonPressed;
                    @GripPercent.started -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnGripPercent;
                    @GripPercent.performed -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnGripPercent;
                    @GripPercent.canceled -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnGripPercent;
                    @TriggerPercent.started -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnTriggerPercent;
                    @TriggerPercent.performed -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnTriggerPercent;
                    @TriggerPercent.canceled -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnTriggerPercent;
                    @TriggerOver.started -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnTriggerOver;
                    @TriggerOver.performed -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnTriggerOver;
                    @TriggerOver.canceled -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnTriggerOver;
                    @Joystick2D.started -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnJoystick2D;
                    @Joystick2D.performed -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnJoystick2D;
                    @Joystick2D.canceled -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnJoystick2D;
                    @IsTracked.started -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnIsTracked;
                    @IsTracked.performed -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnIsTracked;
                    @IsTracked.canceled -= m_Wrapper.m_LeftInputActionsCallbackInterface.OnIsTracked;
                }
                m_Wrapper.m_LeftInputActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Menu.started += instance.OnMenu;
                    @Menu.performed += instance.OnMenu;
                    @Menu.canceled += instance.OnMenu;
                    @DownButton.started += instance.OnDownButton;
                    @DownButton.performed += instance.OnDownButton;
                    @DownButton.canceled += instance.OnDownButton;
                    @DownButtonOver.started += instance.OnDownButtonOver;
                    @DownButtonOver.performed += instance.OnDownButtonOver;
                    @DownButtonOver.canceled += instance.OnDownButtonOver;
                    @TopButton.started += instance.OnTopButton;
                    @TopButton.performed += instance.OnTopButton;
                    @TopButton.canceled += instance.OnTopButton;
                    @TopButtonOver.started += instance.OnTopButtonOver;
                    @TopButtonOver.performed += instance.OnTopButtonOver;
                    @TopButtonOver.canceled += instance.OnTopButtonOver;
                    @JoystickButtonOver.started += instance.OnJoystickButtonOver;
                    @JoystickButtonOver.performed += instance.OnJoystickButtonOver;
                    @JoystickButtonOver.canceled += instance.OnJoystickButtonOver;
                    @JoystickButtonPressed.started += instance.OnJoystickButtonPressed;
                    @JoystickButtonPressed.performed += instance.OnJoystickButtonPressed;
                    @JoystickButtonPressed.canceled += instance.OnJoystickButtonPressed;
                    @GripPercent.started += instance.OnGripPercent;
                    @GripPercent.performed += instance.OnGripPercent;
                    @GripPercent.canceled += instance.OnGripPercent;
                    @TriggerPercent.started += instance.OnTriggerPercent;
                    @TriggerPercent.performed += instance.OnTriggerPercent;
                    @TriggerPercent.canceled += instance.OnTriggerPercent;
                    @TriggerOver.started += instance.OnTriggerOver;
                    @TriggerOver.performed += instance.OnTriggerOver;
                    @TriggerOver.canceled += instance.OnTriggerOver;
                    @Joystick2D.started += instance.OnJoystick2D;
                    @Joystick2D.performed += instance.OnJoystick2D;
                    @Joystick2D.canceled += instance.OnJoystick2D;
                    @IsTracked.started += instance.OnIsTracked;
                    @IsTracked.performed += instance.OnIsTracked;
                    @IsTracked.canceled += instance.OnIsTracked;
                }
            }
        }
        public LeftInputActions @LeftInput => new LeftInputActions(this);

        // RightInput
        private readonly InputActionMap m_RightInput;
        private IRightInputActions m_RightInputActionsCallbackInterface;
        private readonly InputAction m_RightInput_Menu;
        private readonly InputAction m_RightInput_DownButton;
        private readonly InputAction m_RightInput_DownButtonOver;
        private readonly InputAction m_RightInput_TopButton;
        private readonly InputAction m_RightInput_TopButtonOver;
        private readonly InputAction m_RightInput_JoystickButtonOver;
        private readonly InputAction m_RightInput_JoystickButtonPressed;
        private readonly InputAction m_RightInput_GripPercent;
        private readonly InputAction m_RightInput_TriggerPercent;
        private readonly InputAction m_RightInput_TriggerOver;
        private readonly InputAction m_RightInput_Joystick2D;
        private readonly InputAction m_RightInput_IsTracked;
        public struct RightInputActions
        {
            private @ClassicOpenXR m_Wrapper;
            public RightInputActions(@ClassicOpenXR wrapper) { m_Wrapper = wrapper; }
            public InputAction @Menu => m_Wrapper.m_RightInput_Menu;
            public InputAction @DownButton => m_Wrapper.m_RightInput_DownButton;
            public InputAction @DownButtonOver => m_Wrapper.m_RightInput_DownButtonOver;
            public InputAction @TopButton => m_Wrapper.m_RightInput_TopButton;
            public InputAction @TopButtonOver => m_Wrapper.m_RightInput_TopButtonOver;
            public InputAction @JoystickButtonOver => m_Wrapper.m_RightInput_JoystickButtonOver;
            public InputAction @JoystickButtonPressed => m_Wrapper.m_RightInput_JoystickButtonPressed;
            public InputAction @GripPercent => m_Wrapper.m_RightInput_GripPercent;
            public InputAction @TriggerPercent => m_Wrapper.m_RightInput_TriggerPercent;
            public InputAction @TriggerOver => m_Wrapper.m_RightInput_TriggerOver;
            public InputAction @Joystick2D => m_Wrapper.m_RightInput_Joystick2D;
            public InputAction @IsTracked => m_Wrapper.m_RightInput_IsTracked;
            public InputActionMap Get() { return m_Wrapper.m_RightInput; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(RightInputActions set) { return set.Get(); }
            public void SetCallbacks(IRightInputActions instance)
            {
                if (m_Wrapper.m_RightInputActionsCallbackInterface != null)
                {
                    @Menu.started -= m_Wrapper.m_RightInputActionsCallbackInterface.OnMenu;
                    @Menu.performed -= m_Wrapper.m_RightInputActionsCallbackInterface.OnMenu;
                    @Menu.canceled -= m_Wrapper.m_RightInputActionsCallbackInterface.OnMenu;
                    @DownButton.started -= m_Wrapper.m_RightInputActionsCallbackInterface.OnDownButton;
                    @DownButton.performed -= m_Wrapper.m_RightInputActionsCallbackInterface.OnDownButton;
                    @DownButton.canceled -= m_Wrapper.m_RightInputActionsCallbackInterface.OnDownButton;
                    @DownButtonOver.started -= m_Wrapper.m_RightInputActionsCallbackInterface.OnDownButtonOver;
                    @DownButtonOver.performed -= m_Wrapper.m_RightInputActionsCallbackInterface.OnDownButtonOver;
                    @DownButtonOver.canceled -= m_Wrapper.m_RightInputActionsCallbackInterface.OnDownButtonOver;
                    @TopButton.started -= m_Wrapper.m_RightInputActionsCallbackInterface.OnTopButton;
                    @TopButton.performed -= m_Wrapper.m_RightInputActionsCallbackInterface.OnTopButton;
                    @TopButton.canceled -= m_Wrapper.m_RightInputActionsCallbackInterface.OnTopButton;
                    @TopButtonOver.started -= m_Wrapper.m_RightInputActionsCallbackInterface.OnTopButtonOver;
                    @TopButtonOver.performed -= m_Wrapper.m_RightInputActionsCallbackInterface.OnTopButtonOver;
                    @TopButtonOver.canceled -= m_Wrapper.m_RightInputActionsCallbackInterface.OnTopButtonOver;
                    @JoystickButtonOver.started -= m_Wrapper.m_RightInputActionsCallbackInterface.OnJoystickButtonOver;
                    @JoystickButtonOver.performed -= m_Wrapper.m_RightInputActionsCallbackInterface.OnJoystickButtonOver;
                    @JoystickButtonOver.canceled -= m_Wrapper.m_RightInputActionsCallbackInterface.OnJoystickButtonOver;
                    @JoystickButtonPressed.started -= m_Wrapper.m_RightInputActionsCallbackInterface.OnJoystickButtonPressed;
                    @JoystickButtonPressed.performed -= m_Wrapper.m_RightInputActionsCallbackInterface.OnJoystickButtonPressed;
                    @JoystickButtonPressed.canceled -= m_Wrapper.m_RightInputActionsCallbackInterface.OnJoystickButtonPressed;
                    @GripPercent.started -= m_Wrapper.m_RightInputActionsCallbackInterface.OnGripPercent;
                    @GripPercent.performed -= m_Wrapper.m_RightInputActionsCallbackInterface.OnGripPercent;
                    @GripPercent.canceled -= m_Wrapper.m_RightInputActionsCallbackInterface.OnGripPercent;
                    @TriggerPercent.started -= m_Wrapper.m_RightInputActionsCallbackInterface.OnTriggerPercent;
                    @TriggerPercent.performed -= m_Wrapper.m_RightInputActionsCallbackInterface.OnTriggerPercent;
                    @TriggerPercent.canceled -= m_Wrapper.m_RightInputActionsCallbackInterface.OnTriggerPercent;
                    @TriggerOver.started -= m_Wrapper.m_RightInputActionsCallbackInterface.OnTriggerOver;
                    @TriggerOver.performed -= m_Wrapper.m_RightInputActionsCallbackInterface.OnTriggerOver;
                    @TriggerOver.canceled -= m_Wrapper.m_RightInputActionsCallbackInterface.OnTriggerOver;
                    @Joystick2D.started -= m_Wrapper.m_RightInputActionsCallbackInterface.OnJoystick2D;
                    @Joystick2D.performed -= m_Wrapper.m_RightInputActionsCallbackInterface.OnJoystick2D;
                    @Joystick2D.canceled -= m_Wrapper.m_RightInputActionsCallbackInterface.OnJoystick2D;
                    @IsTracked.started -= m_Wrapper.m_RightInputActionsCallbackInterface.OnIsTracked;
                    @IsTracked.performed -= m_Wrapper.m_RightInputActionsCallbackInterface.OnIsTracked;
                    @IsTracked.canceled -= m_Wrapper.m_RightInputActionsCallbackInterface.OnIsTracked;
                }
                m_Wrapper.m_RightInputActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Menu.started += instance.OnMenu;
                    @Menu.performed += instance.OnMenu;
                    @Menu.canceled += instance.OnMenu;
                    @DownButton.started += instance.OnDownButton;
                    @DownButton.performed += instance.OnDownButton;
                    @DownButton.canceled += instance.OnDownButton;
                    @DownButtonOver.started += instance.OnDownButtonOver;
                    @DownButtonOver.performed += instance.OnDownButtonOver;
                    @DownButtonOver.canceled += instance.OnDownButtonOver;
                    @TopButton.started += instance.OnTopButton;
                    @TopButton.performed += instance.OnTopButton;
                    @TopButton.canceled += instance.OnTopButton;
                    @TopButtonOver.started += instance.OnTopButtonOver;
                    @TopButtonOver.performed += instance.OnTopButtonOver;
                    @TopButtonOver.canceled += instance.OnTopButtonOver;
                    @JoystickButtonOver.started += instance.OnJoystickButtonOver;
                    @JoystickButtonOver.performed += instance.OnJoystickButtonOver;
                    @JoystickButtonOver.canceled += instance.OnJoystickButtonOver;
                    @JoystickButtonPressed.started += instance.OnJoystickButtonPressed;
                    @JoystickButtonPressed.performed += instance.OnJoystickButtonPressed;
                    @JoystickButtonPressed.canceled += instance.OnJoystickButtonPressed;
                    @GripPercent.started += instance.OnGripPercent;
                    @GripPercent.performed += instance.OnGripPercent;
                    @GripPercent.canceled += instance.OnGripPercent;
                    @TriggerPercent.started += instance.OnTriggerPercent;
                    @TriggerPercent.performed += instance.OnTriggerPercent;
                    @TriggerPercent.canceled += instance.OnTriggerPercent;
                    @TriggerOver.started += instance.OnTriggerOver;
                    @TriggerOver.performed += instance.OnTriggerOver;
                    @TriggerOver.canceled += instance.OnTriggerOver;
                    @Joystick2D.started += instance.OnJoystick2D;
                    @Joystick2D.performed += instance.OnJoystick2D;
                    @Joystick2D.canceled += instance.OnJoystick2D;
                    @IsTracked.started += instance.OnIsTracked;
                    @IsTracked.performed += instance.OnIsTracked;
                    @IsTracked.canceled += instance.OnIsTracked;
                }
            }
        }
        public RightInputActions @RightInput => new RightInputActions(this);

        // OculusSpecific
        private readonly InputActionMap m_OculusSpecific;
        private IOculusSpecificActions m_OculusSpecificActionsCallbackInterface;
        private readonly InputAction m_OculusSpecific_LeftTouchPad;
        private readonly InputAction m_OculusSpecific_RightTouchPad;
        public struct OculusSpecificActions
        {
            private @ClassicOpenXR m_Wrapper;
            public OculusSpecificActions(@ClassicOpenXR wrapper) { m_Wrapper = wrapper; }
            public InputAction @LeftTouchPad => m_Wrapper.m_OculusSpecific_LeftTouchPad;
            public InputAction @RightTouchPad => m_Wrapper.m_OculusSpecific_RightTouchPad;
            public InputActionMap Get() { return m_Wrapper.m_OculusSpecific; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(OculusSpecificActions set) { return set.Get(); }
            public void SetCallbacks(IOculusSpecificActions instance)
            {
                if (m_Wrapper.m_OculusSpecificActionsCallbackInterface != null)
                {
                    @LeftTouchPad.started -= m_Wrapper.m_OculusSpecificActionsCallbackInterface.OnLeftTouchPad;
                    @LeftTouchPad.performed -= m_Wrapper.m_OculusSpecificActionsCallbackInterface.OnLeftTouchPad;
                    @LeftTouchPad.canceled -= m_Wrapper.m_OculusSpecificActionsCallbackInterface.OnLeftTouchPad;
                    @RightTouchPad.started -= m_Wrapper.m_OculusSpecificActionsCallbackInterface.OnRightTouchPad;
                    @RightTouchPad.performed -= m_Wrapper.m_OculusSpecificActionsCallbackInterface.OnRightTouchPad;
                    @RightTouchPad.canceled -= m_Wrapper.m_OculusSpecificActionsCallbackInterface.OnRightTouchPad;
                }
                m_Wrapper.m_OculusSpecificActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @LeftTouchPad.started += instance.OnLeftTouchPad;
                    @LeftTouchPad.performed += instance.OnLeftTouchPad;
                    @LeftTouchPad.canceled += instance.OnLeftTouchPad;
                    @RightTouchPad.started += instance.OnRightTouchPad;
                    @RightTouchPad.performed += instance.OnRightTouchPad;
                    @RightTouchPad.canceled += instance.OnRightTouchPad;
                }
            }
        }
        public OculusSpecificActions @OculusSpecific => new OculusSpecificActions(this);

        // LeftController
        private readonly InputActionMap m_LeftController;
        private ILeftControllerActions m_LeftControllerActionsCallbackInterface;
        private readonly InputAction m_LeftController_IsTracked;
        private readonly InputAction m_LeftController_Position;
        private readonly InputAction m_LeftController_Rotation;
        public struct LeftControllerActions
        {
            private @ClassicOpenXR m_Wrapper;
            public LeftControllerActions(@ClassicOpenXR wrapper) { m_Wrapper = wrapper; }
            public InputAction @IsTracked => m_Wrapper.m_LeftController_IsTracked;
            public InputAction @Position => m_Wrapper.m_LeftController_Position;
            public InputAction @Rotation => m_Wrapper.m_LeftController_Rotation;
            public InputActionMap Get() { return m_Wrapper.m_LeftController; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(LeftControllerActions set) { return set.Get(); }
            public void SetCallbacks(ILeftControllerActions instance)
            {
                if (m_Wrapper.m_LeftControllerActionsCallbackInterface != null)
                {
                    @IsTracked.started -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnIsTracked;
                    @IsTracked.performed -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnIsTracked;
                    @IsTracked.canceled -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnIsTracked;
                    @Position.started -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnPosition;
                    @Position.performed -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnPosition;
                    @Position.canceled -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnPosition;
                    @Rotation.started -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnRotation;
                    @Rotation.performed -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnRotation;
                    @Rotation.canceled -= m_Wrapper.m_LeftControllerActionsCallbackInterface.OnRotation;
                }
                m_Wrapper.m_LeftControllerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @IsTracked.started += instance.OnIsTracked;
                    @IsTracked.performed += instance.OnIsTracked;
                    @IsTracked.canceled += instance.OnIsTracked;
                    @Position.started += instance.OnPosition;
                    @Position.performed += instance.OnPosition;
                    @Position.canceled += instance.OnPosition;
                    @Rotation.started += instance.OnRotation;
                    @Rotation.performed += instance.OnRotation;
                    @Rotation.canceled += instance.OnRotation;
                }
            }
        }
        public LeftControllerActions @LeftController => new LeftControllerActions(this);

        // RightController
        private readonly InputActionMap m_RightController;
        private IRightControllerActions m_RightControllerActionsCallbackInterface;
        private readonly InputAction m_RightController_IsTracked;
        private readonly InputAction m_RightController_Position;
        private readonly InputAction m_RightController_Rotation;
        public struct RightControllerActions
        {
            private @ClassicOpenXR m_Wrapper;
            public RightControllerActions(@ClassicOpenXR wrapper) { m_Wrapper = wrapper; }
            public InputAction @IsTracked => m_Wrapper.m_RightController_IsTracked;
            public InputAction @Position => m_Wrapper.m_RightController_Position;
            public InputAction @Rotation => m_Wrapper.m_RightController_Rotation;
            public InputActionMap Get() { return m_Wrapper.m_RightController; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(RightControllerActions set) { return set.Get(); }
            public void SetCallbacks(IRightControllerActions instance)
            {
                if (m_Wrapper.m_RightControllerActionsCallbackInterface != null)
                {
                    @IsTracked.started -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnIsTracked;
                    @IsTracked.performed -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnIsTracked;
                    @IsTracked.canceled -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnIsTracked;
                    @Position.started -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnPosition;
                    @Position.performed -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnPosition;
                    @Position.canceled -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnPosition;
                    @Rotation.started -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnRotation;
                    @Rotation.performed -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnRotation;
                    @Rotation.canceled -= m_Wrapper.m_RightControllerActionsCallbackInterface.OnRotation;
                }
                m_Wrapper.m_RightControllerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @IsTracked.started += instance.OnIsTracked;
                    @IsTracked.performed += instance.OnIsTracked;
                    @IsTracked.canceled += instance.OnIsTracked;
                    @Position.started += instance.OnPosition;
                    @Position.performed += instance.OnPosition;
                    @Position.canceled += instance.OnPosition;
                    @Rotation.started += instance.OnRotation;
                    @Rotation.performed += instance.OnRotation;
                    @Rotation.canceled += instance.OnRotation;
                }
            }
        }
        public RightControllerActions @RightController => new RightControllerActions(this);
        private int m_ListenToOpenXRSchemeIndex = -1;
        public InputControlScheme ListenToOpenXRScheme
        {
            get
            {
                if (m_ListenToOpenXRSchemeIndex == -1) m_ListenToOpenXRSchemeIndex = asset.FindControlSchemeIndex("ListenToOpenXR");
                return asset.controlSchemes[m_ListenToOpenXRSchemeIndex];
            }
        }
        public interface ILeftInputActions
        {
            void OnMenu(InputAction.CallbackContext context);
            void OnDownButton(InputAction.CallbackContext context);
            void OnDownButtonOver(InputAction.CallbackContext context);
            void OnTopButton(InputAction.CallbackContext context);
            void OnTopButtonOver(InputAction.CallbackContext context);
            void OnJoystickButtonOver(InputAction.CallbackContext context);
            void OnJoystickButtonPressed(InputAction.CallbackContext context);
            void OnGripPercent(InputAction.CallbackContext context);
            void OnTriggerPercent(InputAction.CallbackContext context);
            void OnTriggerOver(InputAction.CallbackContext context);
            void OnJoystick2D(InputAction.CallbackContext context);
            void OnIsTracked(InputAction.CallbackContext context);
        }
        public interface IRightInputActions
        {
            void OnMenu(InputAction.CallbackContext context);
            void OnDownButton(InputAction.CallbackContext context);
            void OnDownButtonOver(InputAction.CallbackContext context);
            void OnTopButton(InputAction.CallbackContext context);
            void OnTopButtonOver(InputAction.CallbackContext context);
            void OnJoystickButtonOver(InputAction.CallbackContext context);
            void OnJoystickButtonPressed(InputAction.CallbackContext context);
            void OnGripPercent(InputAction.CallbackContext context);
            void OnTriggerPercent(InputAction.CallbackContext context);
            void OnTriggerOver(InputAction.CallbackContext context);
            void OnJoystick2D(InputAction.CallbackContext context);
            void OnIsTracked(InputAction.CallbackContext context);
        }
        public interface IOculusSpecificActions
        {
            void OnLeftTouchPad(InputAction.CallbackContext context);
            void OnRightTouchPad(InputAction.CallbackContext context);
        }
        public interface ILeftControllerActions
        {
            void OnIsTracked(InputAction.CallbackContext context);
            void OnPosition(InputAction.CallbackContext context);
            void OnRotation(InputAction.CallbackContext context);
        }
        public interface IRightControllerActions
        {
            void OnIsTracked(InputAction.CallbackContext context);
            void OnPosition(InputAction.CallbackContext context);
            void OnRotation(InputAction.CallbackContext context);
        }
    }
}
